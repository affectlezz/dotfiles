# Context definitions
global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
endglobal

# Environments
snippet env "Begin new TeX environment" bA
\\begin{$1}
$0
\\end{$1}
endsnippet

snippet proof "Begin theorem environment" bA
\\begin{theorem}
$1
\\end{theorem}

\\begin{proof}
$2
\\end{proof}
endsnippet

snippet fig "Begin figure environment" bA
\\begin{figure}[h!]
\\includegraphics[width=\\textwidth]{$1}
\\caption{$2}
\\label{fig:$3}
\\end{figure}$0
endsnippet

snippet table "Begin table environment" bA
\\begin{tabular}{$1}
\\hline
$2 \\\\
\\caption{$3}
\\label{table:$4}
\\end{tabular}
endsnippet

# References
snippet figref "Figure reference" iA
\\ref{$1}$0
endsnippet

snippet pageref "Page reference" iA
\\pageref{$1}$0
endsnippet

# Sections
priority 1
snippet 5sec "Subparagraph" bA
\\subparagraph{$1}$0
endsnippet

priority 2
snippet 4sec "Paragraph" bA
\\paragraph{$1}$0
endsnippet

priority 3
snippet 3sec "Subsubsection" bA
\\subsubsection{$1}$0
endsnippet

priority 4
snippet 2sec "Subsection" bA
\\subsection{$1}$0
endsnippet

priority 5
snippet sec "Section" bA
\\section{$1}$0
endsnippet

priority 6
snippet chap "Chapter" bA
\\chapter{$1}$0
endsnippet

snippet pb "Pagebreak" bA
\\pagebreak
endsnippet

# Inline environments
snippet im "Inline math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Display math" wA
\[
${1:${VISUAL}}
\] $0
endsnippet

# Math context snippets
context "math()"
snippet tt "Text in math environment" iA
\text{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "Auto subscript" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet '([A-Za-z])\^(\d\d)' "Auto superscript" wrA
`!p snip.rv = match.group(1)`^{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet / "Visual fraction" iA
\\frac{${VISUAL}}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "Fractions" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet -> "Right arrow thin" iA
\\rightarrow
endsnippet

context "math()"
snippet => "Right arrow thick" iA
\\Rightarrow
endsnippet

context "math()"
snippet <=> "Left right arrow" iA
\\Leftrightarrow
endsnippet

context "math()"
snippet inf "Infinity" iA
\\infty
endsnippet

context "math()"
snippet QED "Square" iA
\\blacksquare
endsnippet

context "math()"
snippet * "Explicit multiplication" iA
\\cdot
endsnippet

context "math()"
snippet cross "Cross product" iA
\\times
endsnippet

context "math()"
snippet and "Logical and" iA
\\wedge
endsnippet

context "math()"
snippet or "Logical or" iA
\\vee
endsnippet

context "math()"
snippet in "In" iA
\\in
endsnippet

context "math()"
snippet !in "Not in" iA
\\notin
endsnippet

context "math()"
snippet subset "Subset" iA
\\subset
endsnippet

context "math()"
snippet apprx "Approximate" iA
\\approx
endsnippet

context "math()"
snippet != "Not equal to" iA
\\neq
endsnippet

context "math()"
snippet >= "Greater or equal to" iA
\\geq
endsnippet

context "math()"
snippet <= "Less than or equal to" iA
\\leq
endsnippet

context "math()"
snippet () "Fixed parentheses" iA
\left($1\right)$0
endsnippet

context "math()"
snippet cos "Cosine" iA
\\cos
endsnippet

context "math()"
snippet sin "Sine" iA
\\sin
endsnippet

context "math()"
snippet tan "Tangent" iA
\\tan
endsnippet

context "math()"
snippet arccos "Arcos cosine" iA
\\arccos
endsnippet

context "math()"
snippet arcsin "Arcos sine" iA
\\arcsin
endsnippet

context "math()"
snippet arctan "Arcos tangent" iA
\\arctan
endsnippet

context "math()"
snippet integral "Integral" iA
\\int_{$1}^{$2}$3 \,d$4
endsnippet

context "math()"
snippet sum "Sum" iA
\\sum_{$1}^{$2} $3
endsnippet

context "math()"
snippet lim "Limit" iA
\\lim_{$1 \to $2} $3
endsnippet
